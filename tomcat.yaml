---
- name: tomcat installation
  hosts: appservers
  become: yes
  tasks:
    - name: install java
      ansible.builtin.package:
        name: "{{ java_package_name }}"
        state: present
    - name: create a tomcat group
      ansible.builtin.group:
        name: "{{ group_name }}"
        state: present
    - name: create tomcat user
      ansible.builtin.user:
        name: "{{ user_name }}"
        create_home: true
        group: "{{ group_name }}"
        home: "{{ user_home }}"
        shell: "{{ user_shell }}"
        state: present
    - name: get tomcat stats
      ansible.builtin.stat:
        path: "{{ user_home }}/latest/bin/start.sh"
      register: tomcat_startup
    - name: Download and Untar the tomcat file
      ansible.builtin.unarchive:
        dest: "{{ user_home }}"
        remote_src: yes
        src: "https://www-eu.apache.org/dist/tomcat/tomcat-10/v{{ tomcat_version }}/bin/apache-tomcat-10.1.4.tar.gz"
      when: not tomcat_startup.stat.exists
    - name: Symbolic link creation
      ansible.builtin.file:
        src: /opt/tomcat/apache-tomcat-10.1.4
        path: /opt/tomcat/latest
        state: link
    - name: Changing ownership on tomcat folder
      ansible.builtin.file:
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
        path: /opt/tomcat
        recurse: true
        state: directory
    - name: Making tomcat bin directory executable
      ansible.builtin.command:
        cmd: sudo sh -c 'chmod +x /opt/tomcat/latest/bin/*.sh'
      when: not tomcat_startup.stat.exists
    - name: Copy tomcat service file in ubuntu
      ansible.builtin.copy:
        src: ubuntu.tomcat.service
        dest: /etc/systemd/system/tomcat.service
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      when: ansible_facts["distribution"] == "Ubuntu"    
    - name: Copy tomcat service file in centos
      ansible.builtin.copy:
        src: centos.tomcat.service
        dest: /etc/systemd/system/tomcat.service
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      when: ansible_facts["distribution"] == "CentOS"
    - name: systemd reload and start service
      ansible.builtin.systemd:
        name: "{{ tomcat_service }}"
        daemon_reload: yes
        enabled: yes
        state: started
    - name: configuring tomcat web management interface
      ansible.builtin.copy:
        src: ./tomcat-users.xml
        dest: /opt/tomcat/latest/conf/tomcat-users.xml
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
    - name: manager app configuring
      ansible.builtin.copy:
        src: context.xml
        dest: "{{ item }}"
        owner: "{{ user_name }}"
        group: "{{ group_name }}"
      loop:
        - /opt/tomcat/latest/webapps/manager/META-INF/context.xml
        - /opt/tomcat/latest/webapps/host-manager/META-INF/context.xml
      notify:
        - restart systemd service
  handlers:
    - name: restart systemd service
      ansible.builtin.systemd:
        name: "{{ tomcat_service }}"
        state: restarted